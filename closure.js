// 闭包
// 闭包就是一个用了其他函数的变量的函数。这个变量可能是其他函数的局部变量，也可能是参数。
// ES5中只有两种作用域：函数作用域，全局作用域，如果一个函数中寻找不到一个变量，那么就会到包裹他的函数中去找这个变量，一层一层查找直到找到为止。【没有找到就报错】每一个子函数都会拷贝上级的作用域，形成一个作用域的链条。
// 闭包的关键在于产生对父级作用域的引用，也就是说我们并不一定需要通过在一个函数内返回一个函数才能产生闭包。
var f;
var a = 2;
function test() {
  // let a = 1;
  f = function () {
    console.log(a);
  };
}
test();
f();
// 闭包的形式：
// 1. 函数返回一个函数
// 2. 函数作为参数传递--->可以推知一切回调函数都存在闭包概念
// 3. IIFE创建闭包【print拥有自身作用域，IIFE作用域，全局作用域
(function IIFE(b) {
  function print() {
    console.log(b);
  }
  print();
})(1);

for (var i = 1; i <= 5; i++) {
  (function (j) {
    setTimeout(function timer() {
      console.log(j);
    }, 0);
  })(i);
} 